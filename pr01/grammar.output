Terminals unused in grammar

    NULL_PTR
    FOR
    SWITCH
    CASE
    OTHERWISE
    AND
    COMMENT


State 99 conflicts: 9 shift/reduce
State 116 conflicts: 9 shift/reduce


Grammar

    0 $accept: program $end

    1 program: definition_list sblock

    2 constant: C_INTEGER
    3         | C_REAL
    4         | C_CHARACTER
    5         | C_STRING
    6         | C_TRUE
    7         | C_FALSE

    8 id: ID

    9 typeName: T_INTEGER
   10         | T_REAL
   11         | T_BOOLEAN
   12         | T_CHARACTER
   13         | T_STRING

   14 definition_list: %empty
   15                | definition definition_list

   16 $@1: %empty

   17 definition: TYPE id COLON $@1 dblock
   18           | TYPE id COLON constant ARROW typeName

   19 @2: %empty

   20 definition: TYPE id COLON @2 pblock ARROW typeName
   21           | FUNCTION id COLON id sblock

   22 sblock: L_BRACE statement_list R_BRACE

   23 $@3: %empty

   24 sblock: L_BRACE $@3 dblock statement_list R_BRACE

   25 dblock: L_BRACKET declaration_list R_BRACKET

   26 declaration_list: declaration SEMI_COLON declaration_list
   27                 | declaration

   28 @4: %empty

   29 declaration: typeName COLON @4 identifier_list

   30 identifier_list: id assignOp constant COMMA identifier_list
   31                | id assignOp constant

   32 @5: %empty

   33 identifier_list: id COMMA @5 identifier_list
   34                | id

   35 statement_list: compound_statement statement_list
   36               | compound_statement
   37               | simple_statement SEMI_COLON statement_list
   38               | simple_statement SEMI_COLON

   39 statement: compound_statement
   40          | simple_statement

   41 compound_statement: WHILE L_PARENTHESIS expression R_PARENTHESIS statement sblock
   42                   | IF L_PARENTHESIS expression R_PARENTHESIS THEN sblock ELSE sblock

   43 simple_statement: assignable assignOp expression

   44 assignable: id
   45           | assignable ablock
   46           | assignable recOp id

   47 expression: constant
   48           | preUnaryOperator expression
   49           | expression postUnaryOperator
   50           | assignable
   51           | expression binaryOperator expression
   52           | L_PARENTHESIS expression R_PARENTHESIS
   53           | memOp assignable

   54 pblock: L_PARENTHESIS parameter_list R_PARENTHESIS

   55 parameter_list: non_empty_parameter_list
   56               | %empty

   57 non_empty_parameter_list: parameter_declaration COMMA non_empty_parameter_list
   58                         | parameter_declaration

   59 parameter_declaration: typeName COLON id

   60 ablock: L_PARENTHESIS argument_list R_PARENTHESIS

   61 argument_list: non_empty_argument_list
   62              | %empty

   63 non_empty_argument_list: expression COMMA non_empty_argument_list
   64                        | expression

   65 preUnaryOperator: SUB_OR_NEG
   66                 | ADD
   67                 | NOT
   68                 | REAL2INT
   69                 | INT2REAL

   70 postUnaryOperator: IS_NULL

   71 memOp: RESERVE
   72      | RELEASE

   73 assignOp: ASSIGN

   74 recOp: DOT

   75 binaryOperator: ADD
   76               | SUB_OR_NEG
   77               | MUL
   78               | DIV
   79               | REM
   80               | OR
   81               | LESS_THAN
   82               | EQUAL_TO


Terminals, with rules where they appear

    $end (0) 0
    ID (101) 8
    T_INTEGER (201) 9
    T_REAL (202) 10
    T_BOOLEAN (203) 11
    T_CHARACTER (204) 12
    T_STRING (205) 13
    error (256)
    C_INTEGER (301) 2
    C_REAL (302) 3
    C_CHARACTER (303) 4
    C_STRING (304) 5
    C_TRUE (305) 6
    C_FALSE (306) 7
    NULL_PTR (401)
    FOR (402)
    WHILE (403) 41
    IF (404) 42
    THEN (405) 42
    ELSE (406) 42
    SWITCH (407)
    CASE (408)
    OTHERWISE (409)
    TYPE (410) 17 18 20
    FUNCTION (411) 21
    L_PARENTHESIS (501) 41 42 52 54 60
    R_PARENTHESIS (502) 41 42 52 54 60
    L_BRACKET (503) 25
    R_BRACKET (504) 25
    L_BRACE (505) 22 24
    R_BRACE (506) 22 24
    SEMI_COLON (507) 26 37 38
    COLON (508) 17 18 20 21 29 59
    COMMA (509) 30 33 57 63
    ARROW (510) 18 20
    DOT (511) 74
    ADD (601) 66 75
    SUB_OR_NEG (602) 65 76
    MUL (603) 77
    DIV (604) 78
    REM (605) 79
    LESS_THAN (606) 81
    EQUAL_TO (607) 82
    ASSIGN (608) 73
    INT2REAL (609) 69
    REAL2INT (610) 68
    IS_NULL (611) 70
    NOT (612) 67
    AND (613)
    OR (614) 80
    RESERVE (615) 71
    RELEASE (616) 72
    COMMENT (700)


Nonterminals, with rules where they appear

    $accept (54)
        on left: 0
    program (55)
        on left: 1
        on right: 0
    constant <k> (56)
        on left: 2 3 4 5 6 7
        on right: 18 30 31 47
    id <basic> (57)
        on left: 8
        on right: 17 18 20 21 30 31 33 34 44 46 59
    typeName <basic> (58)
        on left: 9 10 11 12 13
        on right: 18 20 29 59
    definition_list <k> (59)
        on left: 14 15
        on right: 1 15
    definition <k> (60)
        on left: 17 18 20 21
        on right: 15
    $@1 (61)
        on left: 16
        on right: 17
    @2 (62)
        on left: 19
        on right: 20
    sblock <k> (63)
        on left: 22 24
        on right: 1 21 41 42
    $@3 (64)
        on left: 23
        on right: 24
    dblock <k> (65)
        on left: 25
        on right: 17 24
    declaration_list <k> (66)
        on left: 26 27
        on right: 25 26
    declaration <k> (67)
        on left: 29
        on right: 26 27
    @4 (68)
        on left: 28
        on right: 29
    identifier_list <k> (69)
        on left: 30 31 33 34
        on right: 29 30 33
    @5 (70)
        on left: 32
        on right: 33
    statement_list <k> (71)
        on left: 35 36 37 38
        on right: 22 24 35 37
    statement <k> (72)
        on left: 39 40
        on right: 41
    compound_statement (73)
        on left: 41 42
        on right: 35 36 39
    simple_statement <k> (74)
        on left: 43
        on right: 37 38 40
    assignable <k> (75)
        on left: 44 45 46
        on right: 43 45 46 50 53
    expression <k> (76)
        on left: 47 48 49 50 51 52 53
        on right: 41 42 43 48 49 51 52 63 64
    pblock <symtabe> (77)
        on left: 54
        on right: 20
    parameter_list <basic> (78)
        on left: 55 56
        on right: 54
    non_empty_parameter_list <k> (79)
        on left: 57 58
        on right: 55 57
    parameter_declaration <k> (80)
        on left: 59
        on right: 57 58
    ablock (81)
        on left: 60
        on right: 45
    argument_list (82)
        on left: 61 62
        on right: 60
    non_empty_argument_list (83)
        on left: 63 64
        on right: 61 63
    preUnaryOperator (84)
        on left: 65 66 67 68 69
        on right: 48
    postUnaryOperator (85)
        on left: 70
        on right: 49
    memOp (86)
        on left: 71 72
        on right: 53
    assignOp (87)
        on left: 73
        on right: 30 31 43
    recOp (88)
        on left: 74
        on right: 46
    binaryOperator <basic> (89)
        on left: 75 76 77 78 79 80 81 82
        on right: 51


State 0

    0 $accept: . program $end

    TYPE      shift, and go to state 1
    FUNCTION  shift, and go to state 2

    $default  reduce using rule 14 (definition_list)

    program          go to state 3
    definition_list  go to state 4
    definition       go to state 5


State 1

   17 definition: TYPE . id COLON $@1 dblock
   18           | TYPE . id COLON constant ARROW typeName
   20           | TYPE . id COLON @2 pblock ARROW typeName

    ID  shift, and go to state 6

    id  go to state 7


State 2

   21 definition: FUNCTION . id COLON id sblock

    ID  shift, and go to state 6

    id  go to state 8


State 3

    0 $accept: program . $end

    $end  shift, and go to state 9


State 4

    1 program: definition_list . sblock

    L_BRACE  shift, and go to state 10

    sblock  go to state 11


State 5

   15 definition_list: definition . definition_list

    TYPE      shift, and go to state 1
    FUNCTION  shift, and go to state 2

    $default  reduce using rule 14 (definition_list)

    definition_list  go to state 12
    definition       go to state 5


State 6

    8 id: ID .

    $default  reduce using rule 8 (id)


State 7

   17 definition: TYPE id . COLON $@1 dblock
   18           | TYPE id . COLON constant ARROW typeName
   20           | TYPE id . COLON @2 pblock ARROW typeName

    COLON  shift, and go to state 13


State 8

   21 definition: FUNCTION id . COLON id sblock

    COLON  shift, and go to state 14


State 9

    0 $accept: program $end .

    $default  accept


State 10

   22 sblock: L_BRACE . statement_list R_BRACE
   24       | L_BRACE . $@3 dblock statement_list R_BRACE

    ID     shift, and go to state 6
    WHILE  shift, and go to state 15
    IF     shift, and go to state 16

    $default  reduce using rule 23 ($@3)

    id                  go to state 17
    $@3                 go to state 18
    statement_list      go to state 19
    compound_statement  go to state 20
    simple_statement    go to state 21
    assignable          go to state 22


State 11

    1 program: definition_list sblock .

    $default  reduce using rule 1 (program)


State 12

   15 definition_list: definition definition_list .

    $default  reduce using rule 15 (definition_list)


State 13

   17 definition: TYPE id COLON . $@1 dblock
   18           | TYPE id COLON . constant ARROW typeName
   20           | TYPE id COLON . @2 pblock ARROW typeName

    C_INTEGER    shift, and go to state 23
    C_REAL       shift, and go to state 24
    C_CHARACTER  shift, and go to state 25
    C_STRING     shift, and go to state 26
    C_TRUE       shift, and go to state 27
    C_FALSE      shift, and go to state 28

    L_PARENTHESIS  reduce using rule 19 (@2)
    $default       reduce using rule 16 ($@1)

    constant  go to state 29
    $@1       go to state 30
    @2        go to state 31


State 14

   21 definition: FUNCTION id COLON . id sblock

    ID  shift, and go to state 6

    id  go to state 32


State 15

   41 compound_statement: WHILE . L_PARENTHESIS expression R_PARENTHESIS statement sblock

    L_PARENTHESIS  shift, and go to state 33


State 16

   42 compound_statement: IF . L_PARENTHESIS expression R_PARENTHESIS THEN sblock ELSE sblock

    L_PARENTHESIS  shift, and go to state 34


State 17

   44 assignable: id .

    $default  reduce using rule 44 (assignable)


State 18

   24 sblock: L_BRACE $@3 . dblock statement_list R_BRACE

    L_BRACKET  shift, and go to state 35

    dblock  go to state 36


State 19

   22 sblock: L_BRACE statement_list . R_BRACE

    R_BRACE  shift, and go to state 37


State 20

   35 statement_list: compound_statement . statement_list
   36               | compound_statement .

    ID     shift, and go to state 6
    WHILE  shift, and go to state 15
    IF     shift, and go to state 16

    $default  reduce using rule 36 (statement_list)

    id                  go to state 17
    statement_list      go to state 38
    compound_statement  go to state 20
    simple_statement    go to state 21
    assignable          go to state 22


State 21

   37 statement_list: simple_statement . SEMI_COLON statement_list
   38               | simple_statement . SEMI_COLON

    SEMI_COLON  shift, and go to state 39


State 22

   43 simple_statement: assignable . assignOp expression
   45 assignable: assignable . ablock
   46           | assignable . recOp id

    L_PARENTHESIS  shift, and go to state 40
    DOT            shift, and go to state 41
    ASSIGN         shift, and go to state 42

    ablock    go to state 43
    assignOp  go to state 44
    recOp     go to state 45


State 23

    2 constant: C_INTEGER .

    $default  reduce using rule 2 (constant)


State 24

    3 constant: C_REAL .

    $default  reduce using rule 3 (constant)


State 25

    4 constant: C_CHARACTER .

    $default  reduce using rule 4 (constant)


State 26

    5 constant: C_STRING .

    $default  reduce using rule 5 (constant)


State 27

    6 constant: C_TRUE .

    $default  reduce using rule 6 (constant)


State 28

    7 constant: C_FALSE .

    $default  reduce using rule 7 (constant)


State 29

   18 definition: TYPE id COLON constant . ARROW typeName

    ARROW  shift, and go to state 46


State 30

   17 definition: TYPE id COLON $@1 . dblock

    L_BRACKET  shift, and go to state 35

    dblock  go to state 47


State 31

   20 definition: TYPE id COLON @2 . pblock ARROW typeName

    L_PARENTHESIS  shift, and go to state 48

    pblock  go to state 49


State 32

   21 definition: FUNCTION id COLON id . sblock

    L_BRACE  shift, and go to state 10

    sblock  go to state 50


State 33

   41 compound_statement: WHILE L_PARENTHESIS . expression R_PARENTHESIS statement sblock

    ID             shift, and go to state 6
    C_INTEGER      shift, and go to state 23
    C_REAL         shift, and go to state 24
    C_CHARACTER    shift, and go to state 25
    C_STRING       shift, and go to state 26
    C_TRUE         shift, and go to state 27
    C_FALSE        shift, and go to state 28
    L_PARENTHESIS  shift, and go to state 51
    ADD            shift, and go to state 52
    SUB_OR_NEG     shift, and go to state 53
    INT2REAL       shift, and go to state 54
    REAL2INT       shift, and go to state 55
    NOT            shift, and go to state 56
    RESERVE        shift, and go to state 57
    RELEASE        shift, and go to state 58

    constant          go to state 59
    id                go to state 17
    assignable        go to state 60
    expression        go to state 61
    preUnaryOperator  go to state 62
    memOp             go to state 63


State 34

   42 compound_statement: IF L_PARENTHESIS . expression R_PARENTHESIS THEN sblock ELSE sblock

    ID             shift, and go to state 6
    C_INTEGER      shift, and go to state 23
    C_REAL         shift, and go to state 24
    C_CHARACTER    shift, and go to state 25
    C_STRING       shift, and go to state 26
    C_TRUE         shift, and go to state 27
    C_FALSE        shift, and go to state 28
    L_PARENTHESIS  shift, and go to state 51
    ADD            shift, and go to state 52
    SUB_OR_NEG     shift, and go to state 53
    INT2REAL       shift, and go to state 54
    REAL2INT       shift, and go to state 55
    NOT            shift, and go to state 56
    RESERVE        shift, and go to state 57
    RELEASE        shift, and go to state 58

    constant          go to state 59
    id                go to state 17
    assignable        go to state 60
    expression        go to state 64
    preUnaryOperator  go to state 62
    memOp             go to state 63


State 35

   25 dblock: L_BRACKET . declaration_list R_BRACKET

    T_INTEGER    shift, and go to state 65
    T_REAL       shift, and go to state 66
    T_BOOLEAN    shift, and go to state 67
    T_CHARACTER  shift, and go to state 68
    T_STRING     shift, and go to state 69

    typeName          go to state 70
    declaration_list  go to state 71
    declaration       go to state 72


State 36

   24 sblock: L_BRACE $@3 dblock . statement_list R_BRACE

    ID     shift, and go to state 6
    WHILE  shift, and go to state 15
    IF     shift, and go to state 16

    id                  go to state 17
    statement_list      go to state 73
    compound_statement  go to state 20
    simple_statement    go to state 21
    assignable          go to state 22


State 37

   22 sblock: L_BRACE statement_list R_BRACE .

    $default  reduce using rule 22 (sblock)


State 38

   35 statement_list: compound_statement statement_list .

    $default  reduce using rule 35 (statement_list)


State 39

   37 statement_list: simple_statement SEMI_COLON . statement_list
   38               | simple_statement SEMI_COLON .

    ID     shift, and go to state 6
    WHILE  shift, and go to state 15
    IF     shift, and go to state 16

    $default  reduce using rule 38 (statement_list)

    id                  go to state 17
    statement_list      go to state 74
    compound_statement  go to state 20
    simple_statement    go to state 21
    assignable          go to state 22


State 40

   60 ablock: L_PARENTHESIS . argument_list R_PARENTHESIS

    ID             shift, and go to state 6
    C_INTEGER      shift, and go to state 23
    C_REAL         shift, and go to state 24
    C_CHARACTER    shift, and go to state 25
    C_STRING       shift, and go to state 26
    C_TRUE         shift, and go to state 27
    C_FALSE        shift, and go to state 28
    L_PARENTHESIS  shift, and go to state 51
    ADD            shift, and go to state 52
    SUB_OR_NEG     shift, and go to state 53
    INT2REAL       shift, and go to state 54
    REAL2INT       shift, and go to state 55
    NOT            shift, and go to state 56
    RESERVE        shift, and go to state 57
    RELEASE        shift, and go to state 58

    $default  reduce using rule 62 (argument_list)

    constant                 go to state 59
    id                       go to state 17
    assignable               go to state 60
    expression               go to state 75
    argument_list            go to state 76
    non_empty_argument_list  go to state 77
    preUnaryOperator         go to state 62
    memOp                    go to state 63


State 41

   74 recOp: DOT .

    $default  reduce using rule 74 (recOp)


State 42

   73 assignOp: ASSIGN .

    $default  reduce using rule 73 (assignOp)


State 43

   45 assignable: assignable ablock .

    $default  reduce using rule 45 (assignable)


State 44

   43 simple_statement: assignable assignOp . expression

    ID             shift, and go to state 6
    C_INTEGER      shift, and go to state 23
    C_REAL         shift, and go to state 24
    C_CHARACTER    shift, and go to state 25
    C_STRING       shift, and go to state 26
    C_TRUE         shift, and go to state 27
    C_FALSE        shift, and go to state 28
    L_PARENTHESIS  shift, and go to state 51
    ADD            shift, and go to state 52
    SUB_OR_NEG     shift, and go to state 53
    INT2REAL       shift, and go to state 54
    REAL2INT       shift, and go to state 55
    NOT            shift, and go to state 56
    RESERVE        shift, and go to state 57
    RELEASE        shift, and go to state 58

    constant          go to state 59
    id                go to state 17
    assignable        go to state 60
    expression        go to state 78
    preUnaryOperator  go to state 62
    memOp             go to state 63


State 45

   46 assignable: assignable recOp . id

    ID  shift, and go to state 6

    id  go to state 79


State 46

   18 definition: TYPE id COLON constant ARROW . typeName

    T_INTEGER    shift, and go to state 65
    T_REAL       shift, and go to state 66
    T_BOOLEAN    shift, and go to state 67
    T_CHARACTER  shift, and go to state 68
    T_STRING     shift, and go to state 69

    typeName  go to state 80


State 47

   17 definition: TYPE id COLON $@1 dblock .

    $default  reduce using rule 17 (definition)


State 48

   54 pblock: L_PARENTHESIS . parameter_list R_PARENTHESIS

    T_INTEGER    shift, and go to state 65
    T_REAL       shift, and go to state 66
    T_BOOLEAN    shift, and go to state 67
    T_CHARACTER  shift, and go to state 68
    T_STRING     shift, and go to state 69

    $default  reduce using rule 56 (parameter_list)

    typeName                  go to state 81
    parameter_list            go to state 82
    non_empty_parameter_list  go to state 83
    parameter_declaration     go to state 84


State 49

   20 definition: TYPE id COLON @2 pblock . ARROW typeName

    ARROW  shift, and go to state 85


State 50

   21 definition: FUNCTION id COLON id sblock .

    $default  reduce using rule 21 (definition)


State 51

   52 expression: L_PARENTHESIS . expression R_PARENTHESIS

    ID             shift, and go to state 6
    C_INTEGER      shift, and go to state 23
    C_REAL         shift, and go to state 24
    C_CHARACTER    shift, and go to state 25
    C_STRING       shift, and go to state 26
    C_TRUE         shift, and go to state 27
    C_FALSE        shift, and go to state 28
    L_PARENTHESIS  shift, and go to state 51
    ADD            shift, and go to state 52
    SUB_OR_NEG     shift, and go to state 53
    INT2REAL       shift, and go to state 54
    REAL2INT       shift, and go to state 55
    NOT            shift, and go to state 56
    RESERVE        shift, and go to state 57
    RELEASE        shift, and go to state 58

    constant          go to state 59
    id                go to state 17
    assignable        go to state 60
    expression        go to state 86
    preUnaryOperator  go to state 62
    memOp             go to state 63


State 52

   66 preUnaryOperator: ADD .

    $default  reduce using rule 66 (preUnaryOperator)


State 53

   65 preUnaryOperator: SUB_OR_NEG .

    $default  reduce using rule 65 (preUnaryOperator)


State 54

   69 preUnaryOperator: INT2REAL .

    $default  reduce using rule 69 (preUnaryOperator)


State 55

   68 preUnaryOperator: REAL2INT .

    $default  reduce using rule 68 (preUnaryOperator)


State 56

   67 preUnaryOperator: NOT .

    $default  reduce using rule 67 (preUnaryOperator)


State 57

   71 memOp: RESERVE .

    $default  reduce using rule 71 (memOp)


State 58

   72 memOp: RELEASE .

    $default  reduce using rule 72 (memOp)


State 59

   47 expression: constant .

    $default  reduce using rule 47 (expression)


State 60

   45 assignable: assignable . ablock
   46           | assignable . recOp id
   50 expression: assignable .

    L_PARENTHESIS  shift, and go to state 40
    DOT            shift, and go to state 41

    $default  reduce using rule 50 (expression)

    ablock  go to state 43
    recOp   go to state 45


State 61

   41 compound_statement: WHILE L_PARENTHESIS expression . R_PARENTHESIS statement sblock
   49 expression: expression . postUnaryOperator
   51           | expression . binaryOperator expression

    R_PARENTHESIS  shift, and go to state 87
    ADD            shift, and go to state 88
    SUB_OR_NEG     shift, and go to state 89
    MUL            shift, and go to state 90
    DIV            shift, and go to state 91
    REM            shift, and go to state 92
    LESS_THAN      shift, and go to state 93
    EQUAL_TO       shift, and go to state 94
    IS_NULL        shift, and go to state 95
    OR             shift, and go to state 96

    postUnaryOperator  go to state 97
    binaryOperator     go to state 98


State 62

   48 expression: preUnaryOperator . expression

    ID             shift, and go to state 6
    C_INTEGER      shift, and go to state 23
    C_REAL         shift, and go to state 24
    C_CHARACTER    shift, and go to state 25
    C_STRING       shift, and go to state 26
    C_TRUE         shift, and go to state 27
    C_FALSE        shift, and go to state 28
    L_PARENTHESIS  shift, and go to state 51
    ADD            shift, and go to state 52
    SUB_OR_NEG     shift, and go to state 53
    INT2REAL       shift, and go to state 54
    REAL2INT       shift, and go to state 55
    NOT            shift, and go to state 56
    RESERVE        shift, and go to state 57
    RELEASE        shift, and go to state 58

    constant          go to state 59
    id                go to state 17
    assignable        go to state 60
    expression        go to state 99
    preUnaryOperator  go to state 62
    memOp             go to state 63


State 63

   53 expression: memOp . assignable

    ID  shift, and go to state 6

    id          go to state 17
    assignable  go to state 100


State 64

   42 compound_statement: IF L_PARENTHESIS expression . R_PARENTHESIS THEN sblock ELSE sblock
   49 expression: expression . postUnaryOperator
   51           | expression . binaryOperator expression

    R_PARENTHESIS  shift, and go to state 101
    ADD            shift, and go to state 88
    SUB_OR_NEG     shift, and go to state 89
    MUL            shift, and go to state 90
    DIV            shift, and go to state 91
    REM            shift, and go to state 92
    LESS_THAN      shift, and go to state 93
    EQUAL_TO       shift, and go to state 94
    IS_NULL        shift, and go to state 95
    OR             shift, and go to state 96

    postUnaryOperator  go to state 97
    binaryOperator     go to state 98


State 65

    9 typeName: T_INTEGER .

    $default  reduce using rule 9 (typeName)


State 66

   10 typeName: T_REAL .

    $default  reduce using rule 10 (typeName)


State 67

   11 typeName: T_BOOLEAN .

    $default  reduce using rule 11 (typeName)


State 68

   12 typeName: T_CHARACTER .

    $default  reduce using rule 12 (typeName)


State 69

   13 typeName: T_STRING .

    $default  reduce using rule 13 (typeName)


State 70

   29 declaration: typeName . COLON @4 identifier_list

    COLON  shift, and go to state 102


State 71

   25 dblock: L_BRACKET declaration_list . R_BRACKET

    R_BRACKET  shift, and go to state 103


State 72

   26 declaration_list: declaration . SEMI_COLON declaration_list
   27                 | declaration .

    SEMI_COLON  shift, and go to state 104

    $default  reduce using rule 27 (declaration_list)


State 73

   24 sblock: L_BRACE $@3 dblock statement_list . R_BRACE

    R_BRACE  shift, and go to state 105


State 74

   37 statement_list: simple_statement SEMI_COLON statement_list .

    $default  reduce using rule 37 (statement_list)


State 75

   49 expression: expression . postUnaryOperator
   51           | expression . binaryOperator expression
   63 non_empty_argument_list: expression . COMMA non_empty_argument_list
   64                        | expression .

    COMMA       shift, and go to state 106
    ADD         shift, and go to state 88
    SUB_OR_NEG  shift, and go to state 89
    MUL         shift, and go to state 90
    DIV         shift, and go to state 91
    REM         shift, and go to state 92
    LESS_THAN   shift, and go to state 93
    EQUAL_TO    shift, and go to state 94
    IS_NULL     shift, and go to state 95
    OR          shift, and go to state 96

    $default  reduce using rule 64 (non_empty_argument_list)

    postUnaryOperator  go to state 97
    binaryOperator     go to state 98


State 76

   60 ablock: L_PARENTHESIS argument_list . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 107


State 77

   61 argument_list: non_empty_argument_list .

    $default  reduce using rule 61 (argument_list)


State 78

   43 simple_statement: assignable assignOp expression .
   49 expression: expression . postUnaryOperator
   51           | expression . binaryOperator expression

    ADD         shift, and go to state 88
    SUB_OR_NEG  shift, and go to state 89
    MUL         shift, and go to state 90
    DIV         shift, and go to state 91
    REM         shift, and go to state 92
    LESS_THAN   shift, and go to state 93
    EQUAL_TO    shift, and go to state 94
    IS_NULL     shift, and go to state 95
    OR          shift, and go to state 96

    $default  reduce using rule 43 (simple_statement)

    postUnaryOperator  go to state 97
    binaryOperator     go to state 98


State 79

   46 assignable: assignable recOp id .

    $default  reduce using rule 46 (assignable)


State 80

   18 definition: TYPE id COLON constant ARROW typeName .

    $default  reduce using rule 18 (definition)


State 81

   59 parameter_declaration: typeName . COLON id

    COLON  shift, and go to state 108


State 82

   54 pblock: L_PARENTHESIS parameter_list . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 109


State 83

   55 parameter_list: non_empty_parameter_list .

    $default  reduce using rule 55 (parameter_list)


State 84

   57 non_empty_parameter_list: parameter_declaration . COMMA non_empty_parameter_list
   58                         | parameter_declaration .

    COMMA  shift, and go to state 110

    $default  reduce using rule 58 (non_empty_parameter_list)


State 85

   20 definition: TYPE id COLON @2 pblock ARROW . typeName

    T_INTEGER    shift, and go to state 65
    T_REAL       shift, and go to state 66
    T_BOOLEAN    shift, and go to state 67
    T_CHARACTER  shift, and go to state 68
    T_STRING     shift, and go to state 69

    typeName  go to state 111


State 86

   49 expression: expression . postUnaryOperator
   51           | expression . binaryOperator expression
   52           | L_PARENTHESIS expression . R_PARENTHESIS

    R_PARENTHESIS  shift, and go to state 112
    ADD            shift, and go to state 88
    SUB_OR_NEG     shift, and go to state 89
    MUL            shift, and go to state 90
    DIV            shift, and go to state 91
    REM            shift, and go to state 92
    LESS_THAN      shift, and go to state 93
    EQUAL_TO       shift, and go to state 94
    IS_NULL        shift, and go to state 95
    OR             shift, and go to state 96

    postUnaryOperator  go to state 97
    binaryOperator     go to state 98


State 87

   41 compound_statement: WHILE L_PARENTHESIS expression R_PARENTHESIS . statement sblock

    ID     shift, and go to state 6
    WHILE  shift, and go to state 15
    IF     shift, and go to state 16

    id                  go to state 17
    statement           go to state 113
    compound_statement  go to state 114
    simple_statement    go to state 115
    assignable          go to state 22


State 88

   75 binaryOperator: ADD .

    $default  reduce using rule 75 (binaryOperator)


State 89

   76 binaryOperator: SUB_OR_NEG .

    $default  reduce using rule 76 (binaryOperator)


State 90

   77 binaryOperator: MUL .

    $default  reduce using rule 77 (binaryOperator)


State 91

   78 binaryOperator: DIV .

    $default  reduce using rule 78 (binaryOperator)


State 92

   79 binaryOperator: REM .

    $default  reduce using rule 79 (binaryOperator)


State 93

   81 binaryOperator: LESS_THAN .

    $default  reduce using rule 81 (binaryOperator)


State 94

   82 binaryOperator: EQUAL_TO .

    $default  reduce using rule 82 (binaryOperator)


State 95

   70 postUnaryOperator: IS_NULL .

    $default  reduce using rule 70 (postUnaryOperator)


State 96

   80 binaryOperator: OR .

    $default  reduce using rule 80 (binaryOperator)


State 97

   49 expression: expression postUnaryOperator .

    $default  reduce using rule 49 (expression)


State 98

   51 expression: expression binaryOperator . expression

    ID             shift, and go to state 6
    C_INTEGER      shift, and go to state 23
    C_REAL         shift, and go to state 24
    C_CHARACTER    shift, and go to state 25
    C_STRING       shift, and go to state 26
    C_TRUE         shift, and go to state 27
    C_FALSE        shift, and go to state 28
    L_PARENTHESIS  shift, and go to state 51
    ADD            shift, and go to state 52
    SUB_OR_NEG     shift, and go to state 53
    INT2REAL       shift, and go to state 54
    REAL2INT       shift, and go to state 55
    NOT            shift, and go to state 56
    RESERVE        shift, and go to state 57
    RELEASE        shift, and go to state 58

    constant          go to state 59
    id                go to state 17
    assignable        go to state 60
    expression        go to state 116
    preUnaryOperator  go to state 62
    memOp             go to state 63


State 99

   48 expression: preUnaryOperator expression .
   49           | expression . postUnaryOperator
   51           | expression . binaryOperator expression

    ADD         shift, and go to state 88
    SUB_OR_NEG  shift, and go to state 89
    MUL         shift, and go to state 90
    DIV         shift, and go to state 91
    REM         shift, and go to state 92
    LESS_THAN   shift, and go to state 93
    EQUAL_TO    shift, and go to state 94
    IS_NULL     shift, and go to state 95
    OR          shift, and go to state 96

    ADD         [reduce using rule 48 (expression)]
    SUB_OR_NEG  [reduce using rule 48 (expression)]
    MUL         [reduce using rule 48 (expression)]
    DIV         [reduce using rule 48 (expression)]
    REM         [reduce using rule 48 (expression)]
    LESS_THAN   [reduce using rule 48 (expression)]
    EQUAL_TO    [reduce using rule 48 (expression)]
    IS_NULL     [reduce using rule 48 (expression)]
    OR          [reduce using rule 48 (expression)]
    $default    reduce using rule 48 (expression)

    postUnaryOperator  go to state 97
    binaryOperator     go to state 98


State 100

   45 assignable: assignable . ablock
   46           | assignable . recOp id
   53 expression: memOp assignable .

    L_PARENTHESIS  shift, and go to state 40
    DOT            shift, and go to state 41

    $default  reduce using rule 53 (expression)

    ablock  go to state 43
    recOp   go to state 45


State 101

   42 compound_statement: IF L_PARENTHESIS expression R_PARENTHESIS . THEN sblock ELSE sblock

    THEN  shift, and go to state 117


State 102

   29 declaration: typeName COLON . @4 identifier_list

    $default  reduce using rule 28 (@4)

    @4  go to state 118


State 103

   25 dblock: L_BRACKET declaration_list R_BRACKET .

    $default  reduce using rule 25 (dblock)


State 104

   26 declaration_list: declaration SEMI_COLON . declaration_list

    T_INTEGER    shift, and go to state 65
    T_REAL       shift, and go to state 66
    T_BOOLEAN    shift, and go to state 67
    T_CHARACTER  shift, and go to state 68
    T_STRING     shift, and go to state 69

    typeName          go to state 70
    declaration_list  go to state 119
    declaration       go to state 72


State 105

   24 sblock: L_BRACE $@3 dblock statement_list R_BRACE .

    $default  reduce using rule 24 (sblock)


State 106

   63 non_empty_argument_list: expression COMMA . non_empty_argument_list

    ID             shift, and go to state 6
    C_INTEGER      shift, and go to state 23
    C_REAL         shift, and go to state 24
    C_CHARACTER    shift, and go to state 25
    C_STRING       shift, and go to state 26
    C_TRUE         shift, and go to state 27
    C_FALSE        shift, and go to state 28
    L_PARENTHESIS  shift, and go to state 51
    ADD            shift, and go to state 52
    SUB_OR_NEG     shift, and go to state 53
    INT2REAL       shift, and go to state 54
    REAL2INT       shift, and go to state 55
    NOT            shift, and go to state 56
    RESERVE        shift, and go to state 57
    RELEASE        shift, and go to state 58

    constant                 go to state 59
    id                       go to state 17
    assignable               go to state 60
    expression               go to state 75
    non_empty_argument_list  go to state 120
    preUnaryOperator         go to state 62
    memOp                    go to state 63


State 107

   60 ablock: L_PARENTHESIS argument_list R_PARENTHESIS .

    $default  reduce using rule 60 (ablock)


State 108

   59 parameter_declaration: typeName COLON . id

    ID  shift, and go to state 6

    id  go to state 121


State 109

   54 pblock: L_PARENTHESIS parameter_list R_PARENTHESIS .

    $default  reduce using rule 54 (pblock)


State 110

   57 non_empty_parameter_list: parameter_declaration COMMA . non_empty_parameter_list

    T_INTEGER    shift, and go to state 65
    T_REAL       shift, and go to state 66
    T_BOOLEAN    shift, and go to state 67
    T_CHARACTER  shift, and go to state 68
    T_STRING     shift, and go to state 69

    typeName                  go to state 81
    non_empty_parameter_list  go to state 122
    parameter_declaration     go to state 84


State 111

   20 definition: TYPE id COLON @2 pblock ARROW typeName .

    $default  reduce using rule 20 (definition)


State 112

   52 expression: L_PARENTHESIS expression R_PARENTHESIS .

    $default  reduce using rule 52 (expression)


State 113

   41 compound_statement: WHILE L_PARENTHESIS expression R_PARENTHESIS statement . sblock

    L_BRACE  shift, and go to state 10

    sblock  go to state 123


State 114

   39 statement: compound_statement .

    $default  reduce using rule 39 (statement)


State 115

   40 statement: simple_statement .

    $default  reduce using rule 40 (statement)


State 116

   49 expression: expression . postUnaryOperator
   51           | expression . binaryOperator expression
   51           | expression binaryOperator expression .

    ADD         shift, and go to state 88
    SUB_OR_NEG  shift, and go to state 89
    MUL         shift, and go to state 90
    DIV         shift, and go to state 91
    REM         shift, and go to state 92
    LESS_THAN   shift, and go to state 93
    EQUAL_TO    shift, and go to state 94
    IS_NULL     shift, and go to state 95
    OR          shift, and go to state 96

    ADD         [reduce using rule 51 (expression)]
    SUB_OR_NEG  [reduce using rule 51 (expression)]
    MUL         [reduce using rule 51 (expression)]
    DIV         [reduce using rule 51 (expression)]
    REM         [reduce using rule 51 (expression)]
    LESS_THAN   [reduce using rule 51 (expression)]
    EQUAL_TO    [reduce using rule 51 (expression)]
    IS_NULL     [reduce using rule 51 (expression)]
    OR          [reduce using rule 51 (expression)]
    $default    reduce using rule 51 (expression)

    postUnaryOperator  go to state 97
    binaryOperator     go to state 98


State 117

   42 compound_statement: IF L_PARENTHESIS expression R_PARENTHESIS THEN . sblock ELSE sblock

    L_BRACE  shift, and go to state 10

    sblock  go to state 124


State 118

   29 declaration: typeName COLON @4 . identifier_list

    ID  shift, and go to state 6

    id               go to state 125
    identifier_list  go to state 126


State 119

   26 declaration_list: declaration SEMI_COLON declaration_list .

    $default  reduce using rule 26 (declaration_list)


State 120

   63 non_empty_argument_list: expression COMMA non_empty_argument_list .

    $default  reduce using rule 63 (non_empty_argument_list)


State 121

   59 parameter_declaration: typeName COLON id .

    $default  reduce using rule 59 (parameter_declaration)


State 122

   57 non_empty_parameter_list: parameter_declaration COMMA non_empty_parameter_list .

    $default  reduce using rule 57 (non_empty_parameter_list)


State 123

   41 compound_statement: WHILE L_PARENTHESIS expression R_PARENTHESIS statement sblock .

    $default  reduce using rule 41 (compound_statement)


State 124

   42 compound_statement: IF L_PARENTHESIS expression R_PARENTHESIS THEN sblock . ELSE sblock

    ELSE  shift, and go to state 127


State 125

   30 identifier_list: id . assignOp constant COMMA identifier_list
   31                | id . assignOp constant
   33                | id . COMMA @5 identifier_list
   34                | id .

    COMMA   shift, and go to state 128
    ASSIGN  shift, and go to state 42

    $default  reduce using rule 34 (identifier_list)

    assignOp  go to state 129


State 126

   29 declaration: typeName COLON @4 identifier_list .

    $default  reduce using rule 29 (declaration)


State 127

   42 compound_statement: IF L_PARENTHESIS expression R_PARENTHESIS THEN sblock ELSE . sblock

    L_BRACE  shift, and go to state 10

    sblock  go to state 130


State 128

   33 identifier_list: id COMMA . @5 identifier_list

    $default  reduce using rule 32 (@5)

    @5  go to state 131


State 129

   30 identifier_list: id assignOp . constant COMMA identifier_list
   31                | id assignOp . constant

    C_INTEGER    shift, and go to state 23
    C_REAL       shift, and go to state 24
    C_CHARACTER  shift, and go to state 25
    C_STRING     shift, and go to state 26
    C_TRUE       shift, and go to state 27
    C_FALSE      shift, and go to state 28

    constant  go to state 132


State 130

   42 compound_statement: IF L_PARENTHESIS expression R_PARENTHESIS THEN sblock ELSE sblock .

    $default  reduce using rule 42 (compound_statement)


State 131

   33 identifier_list: id COMMA @5 . identifier_list

    ID  shift, and go to state 6

    id               go to state 125
    identifier_list  go to state 133


State 132

   30 identifier_list: id assignOp constant . COMMA identifier_list
   31                | id assignOp constant .

    COMMA  shift, and go to state 134

    $default  reduce using rule 31 (identifier_list)


State 133

   33 identifier_list: id COMMA @5 identifier_list .

    $default  reduce using rule 33 (identifier_list)


State 134

   30 identifier_list: id assignOp constant COMMA . identifier_list

    ID  shift, and go to state 6

    id               go to state 125
    identifier_list  go to state 135


State 135

   30 identifier_list: id assignOp constant COMMA identifier_list .

    $default  reduce using rule 30 (identifier_list)
